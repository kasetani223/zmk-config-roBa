#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/pointing.h>

#define MOUSE 4
#define SCROLL 5
#define NUM 6

&mt {
    flavor = "balanced";
    quick-tap-ms = <0>;
};

/ {
    combos {
        compatible = "zmk,combos";

        tab {
            bindings = <&kp TAB>;
            key-positions = <11 12>;
        };

        shift_tab {
            bindings = <&kp LS(TAB)>;
            key-positions = <12 13>;
        };

        muhennkann {
            bindings = <&to_layer_0 INT_MUHENKAN>;
            key-positions = <11 10>;
        };

        double_quotation {
            bindings = <&kp DOUBLE_QUOTES>;
            key-positions = <20 21>;
        };

        eq {
            bindings = <&kp EQUAL>;
            key-positions = <24 25>;
        };
    };

    macros {
        to_layer_0: to_layer_0 {
            compatible = "zmk,behavior-macro-one-param";
            #binding-cells = <1>;
            bindings = <&to 0 &macro_param_1to1 &kp MACRO_PLACEHOLDER>;
            label = "TO_LAYER_0";
        };

        to_layer_1: to_layer_1 {
            compatible = "zmk,behavior-macro-one-param";
            #binding-cells = <1>;
            bindings = <&to 1 &macro_param_1to1 &kp MACRO_PLACEHOLDER>;
            label = "TO_LAYER_1";
        };

        bt0: bt0 {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&tog_off 1>,
                <&macro_wait_time 200>,
                <&bt BT_SEL 0>,
                <&macro_wait_time 500>;

            label = "BT0";
        };

        bt1: bt1 {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&tog_off 1>,
                <&macro_wait_time 200>,
                <&bt BT_SEL 1>,
                <&macro_wait_time 500>,
                <&tog_on 1>;

            label = "BT1";
        };
    };

    behaviors {
        lt_to_layer_0: lt_to_layer_0 {
            compatible = "zmk,behavior-hold-tap";
            label = "LAYER_TAP_TO_0";
            bindings = <&mo>, <&to_layer_0>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
        };

        lt_to_layer_1: lt_to_layer_1 {
            compatible = "zmk,behavior-hold-tap";
            label = "LAYER_TAP_TO_1";
            bindings = <&mo>, <&to_layer_1>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
        };

        tog_on: toggle_layer_on_only {
            compatible = "zmk,behavior-toggle-layer";
            #binding-cells = <1>;
            display-name = "Toggle Layer On";
            toggle-mode = "on";
        };

        tog_off: toggle_layer_off_only {
            compatible = "zmk,behavior-toggle-layer";
            #binding-cells = <1>;
            display-name = "Toggle Layer Off";
            toggle-mode = "off";
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            bindings = <
&kp Q             &kp W         &kp E         &kp R                   &kp T                                                   &kp Y        &kp U  &kp I      &kp O    &kp P
&kp A             &kp S         &kp D         &kp F                   &kp G        &trans                      &trans         &kp H        &kp J  &kp K      &kp L    &lt 5 MINUS
&mt LEFT_SHIFT Z  &kp X         &kp C         &kp V                   &kp B        &mt LCTRL TAB               &lt 7 SQT      &kp N        &kp M  &kp COMMA  &kp DOT  &mt LEFT_SHIFT SLASH
&kp LCTRL         &kp LEFT_WIN  &kp LEFT_ALT  &lt_to_layer_0 6 LANG1  &lt 2 SPACE  &lt_to_layer_0 3 LANG2      &kp BACKSPACE  &lt 2 ENTER                             &kp SEMICOLON
            >;

            sensor-bindings = <&inc_dec_kp PAGE_DOWN PG_UP>;
        };

        mac_layer {
            bindings = <
&kp Q             &kp Q         &kp E         &kp R                   &kp T                                                   &kp Y        &kp U  &kp I      &kp O    &kp P
&kp A             &kp S         &kp D         &kp F                   &kp G        &trans                      &trans         &kp H        &kp J  &kp K      &kp L    &lt 5 MINUS
&mt LEFT_SHIFT Z  &kp X         &kp C         &kp V                   &kp B        &mt LEFT_GUI TAB            &lt 7 SQT      &kp N        &kp M  &kp COMMA  &kp DOT  &mt LEFT_SHIFT SLASH
&kp LCTRL         &kp LEFT_WIN  &kp LEFT_ALT  &lt_to_layer_0 6 LANG1  &lt 2 SPACE  &lt_to_layer_0 3 LANG2      &kp BACKSPACE  &lt 2 ENTER                             &kp SEMICOLON
            >;
        };

        CONTROL {
            bindings = <
&kp ESC       &kp LS(LG(LEFT_ARROW))  &kp LG(UP_ARROW)    &kp LS(LG(RIGHT_ARROW))  &kp LG(LS(S))                                         &kp LC(EQUAL)        &kp LS(LC(TAB))  &kp UP_ARROW    &kp LC(TAB)      &kp HOME
&trans        &kp LG(LEFT_ARROW)      &kp LG(DOWN_ARROW)  &kp LG(RIGHT_ARROW)      &kp LG(TAB)    &trans             &trans              &kp LC(MINUS)        &kp LEFT_ARROW   &kp DOWN_ARROW  &kp RIGHT_ARROW  &kp END
&kp CAPSLOCK  &kp F2                  &kp LC(LS(F))       &kp F4                   &kp F5         &kp LS(LC(P))      &kp LG(L)           &kp LG(R)            &kp LC(V)        &kp LC(C)       &kp LC(X)        &kp RIGHT_SHIFT
&trans        &trans                  &trans              &kp DEL                  &kp LC(Z)      &kp LC(Y)          &kp LA(LEFT_ARROW)  &kp LA(RIGHT_ARROW)                                                    &trans
            >;
        };

        NUM_SYMBOL {
            bindings = <
&kp ASTERISK                &kp KP_NUMBER_7  &kp KP_NUMBER_8  &kp KP_NUMBER_9  &kp PLUS                              &kp PIPE        &kp EXCLAMATION       &kp AT_SIGN            &kp HASH        &kp DOLLAR
&kp SLASH                   &kp KP_NUMBER_4  &kp KP_NUMBER_5  &kp KP_NUMBER_6  &kp MINUS   &trans         &trans     &kp UNDERSCORE  &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS  &kp PERCENT     &kp AMPERSAND
&mt LEFT_SHIFT KP_NUMBER_0  &kp KP_NUMBER_1  &kp KP_NUMBER_2  &kp KP_NUMBER_3  &kp PERIOD  &kp EQUAL      &kp CARET  &kp COLON       &kp LEFT_BRACKET      &kp RIGHT_BRACKET      &kp LEFT_BRACE  &kp RIGHT_BRACE
&trans                      &trans           &trans           &trans           &trans      &trans         &trans     &trans                                                                       &kp NON_US_BACKSLASH
            >;
        };

        MOUSE {
            bindings = <
&trans  &trans  &trans  &trans  &trans                      &trans  &trans    &trans    &trans    &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans  &mkp MB1  &mkp MB3  &mkp MB2  &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans  &trans    &trans    &trans    &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans                                &trans
            >;
        };

        SCROLL {
            bindings = <
&trans  &trans  &trans  &trans  &trans                      &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans                          &trans
            >;
        };

        FUNCTION {
            bindings = <
&kp F1   &kp F2   &kp F3  &kp F4  &kp F5                       &trans  &trans     &trans     &trans  &trans
&kp F6   &kp F7   &kp F8  &kp F9  &kp F10  &trans      &trans  &trans  &kp GRAVE  &kp TILDE  &trans  &trans
&kp F11  &kp F12  &trans  &trans  &trans   &trans      &trans  &trans  &trans     &trans     &trans  &trans
&trans   &trans   &trans  &trans  &trans   &trans      &trans  &trans                                &trans
            >;

            sensor-bindings = <&inc_dec_kp LC(PAGE_UP) LC(PAGE_DOWN)>;
        };

        DEVICE {
            bindings = <
&trans  &trans  &trans  &trans  &trans                           &bt0    &bt1    &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4
&trans  &trans  &trans  &trans  &trans  &trans      &trans       &trans  &trans  &trans        &trans        &trans
&trans  &trans  &trans  &trans  &trans  &trans      &bootloader  &trans  &trans  &trans        &trans        &bt BT_CLR
&trans  &trans  &trans  &trans  &trans  &trans      &trans       &trans                                      &bt BT_CLR_ALL
            >;
        };
    };
};
